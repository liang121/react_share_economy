try{var htmlString="\n\n<!DOCTYPE html>\n<html>\n<body>\n<style>\nbody{margin:0;font-family:sans-serif;}\n#ad{position:relative;overflow:hidden;}\n#ad,#link,#lazy,#vpc-link,#mobile-ads-link img,#vpc-lazy{width:400px;height:39px;}\n#link,#lazy,#vpc-link,#vpc-lazy{position:absolute;}\n#link,#vpc-link{cursor:pointer;background-repeat:no-repeat;}\n\n.hide{display:none!important;}\n#link {\n    top: 0;\n    left: 0;\n}\n    \n    \n    \n\n#logo{\n    display: none;\n    position: absolute;\n    background-repeat: no-repeat;\n    width : 69px;\n    height : 29px;\n    background-position: -6px 6px;\n}\n\n#daAdFeedback {\n    color: #fff;\n    cursor: pointer;\n    display: inline-block;\n    font: 9px Verdana,Arial;\n    position: absolute;\n    text-decoration: none;\n    top: 2px;\n    right: 5px;\n}\n\n#daAdFeedbackIcon {\n    display: inline-block;\n    vertical-align: top;\n    margin: 1px 0px;\n    width: 12px;\n    height: 12px;\n}\n.ac {\n    display: block;\n    position: absolute;\n    overflow: hidden;\n    width: 19px;\n    height: 15px;\n    z-index: 9;\n        top: 0;\n        left: 0;\n    background: url(https://images-na.ssl-images-amazon.com/images/G/01/da/adchoices/ac-topleft-sprite.png);\n}\n.ac:hover {\n    width:77px;\n    background-position:-19px 0;\n}\n\n.hide {\n    display:none!important;\n}\n\n#daAdFeedback { display:none!important; }\n</style>\n\n<div id=\"ad\">\n    <a id=\"link\"></a>\n\n\n        <a id=\"logo\"></a>\n\n<a  id=\"aapInfo\"\n    target=\"_blank\"\n    class=\"hide ac\"\n        href=\"https://www.amazon.com/adprefs\"\n    >\n</a>\n\n\n    <!-- feedback link -->\n<a id=\"daAdFeedback\">\n    <span id=\"daAdFeedbackText\"></span>&nbsp;<b id=\"daAdFeedbackIcon\"></b>\n</a>\n</div>\n\n\n<script type='text/javascript'>\n// This include should be at the top so that SafeFrame can query\n// for Ad/Creative Ids immediately\n\n//IMDb requires document.ad object defined outside the setTimeout.\n\n\n// Make the ad and creative identifiable on IMDb and Amazon.\ndocument.ad = {\n        w: 400,\n        h: 39,\n        template: \"Static Image-1.124\"\n};\n\nwindow.aanResponse = {\n    adId: document.ad.aid,\n    creativeId: document.ad.cid,\n        // If shazamStage isn't 'production' then assign it to the\n        // aanResponse, otherwise, do nothing and clients looking for\n        // shazamStage will assume 'production' if no value is found.\n        shazamStage: 'prod',\n    shazamId: '2244087'\n};\n\n// If IMDb's \"ad_utils\" object exists, expand so the ad can be seen.\ntry {\n    if (parent && parent.ad_utils) {\n        parent.ad_utils.expand_ad(frameElement);\n    }\n}\ncatch (e) {\n    // Not inside a friendly iframe.\n}\n\n\n\n// setTimeout fixes load on back button for safari in some slots.\nsetTimeout(function(){\n// Wrap it in a closure for better minification.\n(function(window, document) {\n    (function() {\n    /*\n        Minimal amount of logging code to get basic template information\n        flowing through the metrics pipeline.\n        \n        TODO: replace this code in templates with finer-grained logging.\n    */\n    var ShazamLogger = (function() {\n    var ForesterLogger = (function() {\n\n    var DEFAULT_SAMPLE_RATE = 0.05;\n    var DEFAULT_KINESIS_ID = 'clmet';\n\n    /**\n     * Constructor\n     * @param channelName required to indicate the forester channel name. If it is\n     * missing, all the calls for logging by this object will be handled silently.\n     * @param impressionId This is an optional parameter. If it is not provided, \n     * a random uuid will be generated.\n     * @param stage This is an optional parameter. It indicates the stage of a product,\n     * defaulted to prod stage if not provided.\n     * @param region This is an optional parameter. It indicates the region where the\n     * product will be used, defaulted to north american.\n     * @param samplingRate (optional float between 0 and 1). Specifies the percentage of impression\n     * for which metrics get recorded.\n     * @param kinesisAppId. Optional parameter if you wish to send logs to a different\n     * kinesis stream other than the default (ClientMetrics-*).\n     * Stage and region are used to generate log endpoint url.\n     * \n     * @returns a new ForseterLogger object\n     */\n    var ForesterLogger = function(channelName, impressionId, stage, region, samplingRate, kinesisAppId) {\n        this.samplingRate = samplingRate || DEFAULT_SAMPLE_RATE;\n        this.shouldFireMetrics = Math.random() <= this.samplingRate;\n        this.channelName = channelName;\n        this.impressionId = impressionId || ForesterLogger.generateUUID();\n        this.stage = stage || 'prod';\n        this.region = region || 'na';\n        this.kinesisAppId = kinesisAppId || DEFAULT_KINESIS_ID;\n        // Use the stage and region to construct the server endpoint\n        this.log_endpoint = ForesterLogger.generateUrl(this.stage, this.region);\n    };\n\n    /**\n     * @returns a randomly generated uuid\n     */\n    ForesterLogger.generateUUID = function() {\n        function subUUID() {\n        	// Generate a random value between 0x10000 and 0x20000\n        	// then convert to hex string ie 1FFFF\n        	// then cutoff first digit and take the next four to avoid \n        	// problems when Math.floor/ or toString doesn't work correctly and outputs a decimal value as well\n        	// ie 1FFFF.FFFFFFFFF\n            return  Math.floor((1 + Math.random()) * 0x10000).toString(16).substr(1,4);\n        }\n        return subUUID() + subUUID() + subUUID() + subUUID() + subUUID() + subUUID() + subUUID() + subUUID();\n    };\n    \n    /**\n     * Generate a url with combination of stage and region\n     * Beta stage will be set to gamma because of the forester channel issue, \n     * in the default case it will also be set to gamma\n     */\n    ForesterLogger.generateUrl = function(stage, region) {\n        var sisProtocol = '';\n        var sisDomain = '';\n        // Jp locale uses special case which is normalized to 'fe'\n        region = region == 'jp' ? 'fe' : region;\n        region = region.toLowerCase(); //make sure regions are in lowercase since we sometimes work with uppercase digraphs in shazam\n        // NA doesnt require a suffix, but other requires\n        var regionSuffix = region == 'na' ? '' : '-' + region;\n    \n        // Function to get sisDomain \n        var getSisDomain = function(stageSuffix) {\n            var subdomain = (regionSuffix ? 'aax' : 's') + regionSuffix + stageSuffix;\n            var path = (regionSuffix ? '/s' : '');\n            return subdomain + '.amazon-adsystem.com' + path;\n        }\n        switch (stage) {\n        case 'prod':\n        case 'prodlabs':\n            sisProtocol = 'ANY';\n            sisDomain = getSisDomain('');\n            break;\n        case 'beta':\n        case 'gamma':\n            sisProtocol = 'http:';\n            sisDomain = getSisDomain(region == 'na' ? '-preprod' : '-gamma');\n            break;\n        case 'local':\n        default:\n            sisProtocol = 'http:';\n            sisDomain = getSisDomain(region == 'na' ? '-preprod' : '-gamma');\n            break;\n        }\n        var log_server_endpoint = (sisProtocol === 'ANY' ? location.protocol : sisProtocol) + '//' + sisDomain;\n        return log_server_endpoint;\n    };\n    \n    /**\n     * Helper for iterating over collections\n     */\n    ForesterLogger.each = function(collection, callback) {\n        if (!collection || !callback || typeof callback !== 'function') {\n            return;\n        }\n    \n        if (collection.length) {\n            for ( var i = 0, length = collection.length; i < length; i++) {\n                callback(i, collection[i]);\n            }\n        } else {\n            for ( var key in collection) {\n                callback(key, collection[key]);\n            }\n        }\n    };\n    \n    /**\n     * @param options A hash-map of options to do in the process of generating the query string\n     * @returns a query string by flattening a hash-map of params that will be after the '?' delimiter\n     */\n    ForesterLogger.getQueryString = function(params, options) {\n        options = options || {}; // Default to empty hash-map\n        var escapeValue = (typeof options.escape === 'boolean') ? options.escape : true; // Default to encode the value to avoid special characters\n        var query = [];\n        ForesterLogger.each(params, function(name, param) {\n            if (typeof param !== 'undefined') {\n                param = (param.constructor === Array) ? param.join(',') : param;\n    \n                // Encode the value in order to avoid the influence of containing '&' in param value\n                if (escapeValue) {\n                    param = encodeURIComponent(param);\n                }\n                query.push([ name, param ].join('='));\n            }\n        });\n    \n        var queryString = query.join('&');\n        return queryString;\n    };\n    \n    /**\n     *  Helper method for making the complete forester url from an object of parameters. This is used by\n     *  the send pixel method and can be used externally if you want to generate the logging url but not\n     *  fire the event immediately.\n     */\n    ForesterLogger.prototype.generatePixelUrl = function(params) {\n        // Hash-map of options in generating the query string\n        var options = {};\n        // add the impressionId\n        params = params || {};\n        // Encode the value in order to avoid the influence of containing '&' in param value\n        params.i = encodeURIComponent(this.impressionId);\n        params.app = encodeURIComponent(this.kinesisAppId);\n        \n        var pixelParams = {};\n        pixelParams['d'] = 'forester-did';\n        pixelParams['ex-fch'] = this.channelName;\n        \n        pixelParams['ex-fargs'] = '?' + encodeURIComponent(ForesterLogger.getQueryString(params));\n        pixelParams['cb'] = new Date().getTime(); //To make sure the url generated is different everytime so browser will hit\n\n        // No need to escape value for pixelParams since it is well formed and the values are known to us\n        options.escape = false;\n\n        return this.log_endpoint + '/iui3?' + ForesterLogger.getQueryString(pixelParams, options);\n    }\n\n    /**\n     * Sends a pixel to remote logging server\n     */\n    ForesterLogger.prototype.sendPixel = function(params) {\n        if(!this.shouldFireMetrics) {\n            return;\n        }\n        var pixel = new Image();\n        pixel.src = this.generatePixelUrl(params);\n        return pixel;\n    };\n    \n    \n    /**\n     * Log the impression with provided argsLists and its own impressionId.\n     * @param argsLists The key-value pair to be inculded. It's optional.\n     */\n    ForesterLogger.prototype.logImpression = function(argsLists) {\n        if (this.channelName == null) {\n            return;\n        }\n        //to specify it is a impression pixel\n        argsLists = argsLists || {};\n        argsLists.imp = 1;\n        this.sendPixel(argsLists);\n    };\n    \n    /**\n     * Log the events with event name and event value \n     * @param eventName Indicated the name of a specific event.\n     * @param eventValue The value of the event. It can be a simple data type or a\n     * json object\n     * @param eventType The type of the event value. It is optional. some example\n     * inputs may be: counter, timer, json\n     */\n    ForesterLogger.prototype.logEvent = function(eventName, eventValue, eventType) {\n        if (this.channelName == null) {\n            return;\n        }\n        var events = {};\n        if (eventName == null || eventValue == null) {\n            return;\n        }\n        try {\n            if (eventType) {\n                events['type'] = eventType;\n            }\n            var val = JSON.stringify(eventValue);\n            events.en = eventName;\n            events.ev = val;\n        } catch (e) {\n            //handle when JSON.stringify is not available(< ie 8 etc). Logging it with special event \n            //named stringifyNotAvailable for tracking whether this situation happens and how often it\n            //happens.\n            events['stringifyNotAvailable'] = 1;\n        }\n        this.sendPixel(events);\n    };\n\n    /**\n     * Setter method for `impressionId` property\n     */\n    ForesterLogger.prototype.setImpressionId = function(impressionId) {\n        this.impressionId = impressionId;\n    };\n\n    return ForesterLogger;\n})();\n\n    var DEFAULT_SAMPLE_RATE = 0.05;\n    var DEFAULT_FORESTER_CHANNEL = 'da-cx-metrics';\n\n    /**\n     * Constructor of ShazamLogger, inherit from ForesterLogger for logging typical\n     * ecommerce data at impression time. \n     * @param impressionId It is optional, if not provided, a random uuid will be \n     * generated.\n     * @param foresterChannel. Optional parameter if you wish to log to a different\n     * forester chanel other than the default\n     * @param samplingRate (optional float between 0 and 1). Percentage of impressions which will records metrics\n     * @param kinesisAppId. Optional parameter if you wish to send logs to a different\n     * kinesis stream other than the default (see ForesterLogger.js)\n     * @returns a new ShazamLogger object\n     */\n    var ShazamLogger = function(impressionId, foresterChannel, samplingRate, kinesisAppId) {\n        var samplingRate = samplingRate || DEFAULT_SAMPLE_RATE;\n        var foresterChannel = foresterChannel || DEFAULT_FORESTER_CHANNEL;\n        ForesterLogger.call(this, foresterChannel, impressionId, 'prod', 'na', samplingRate, kinesisAppId);\n        var s_logger = this;\n        this.timers = {};\n        /**\n         * error listener for all the templates*/\n        ShazamLogger.addListener(window ,\"error\", function(e) {\n            // Add a stack trace if it is supported by browser\n            if(e.error && e.error.stack) {\n                var stack = e.message + \" : \" + e.error.stack;\n                // Check the length and log the error message with stack trace\n                s_logger.addCount(ShazamLogger.LOG_EVENT_NAMES.UNCAUGHT_ERROR, stack.length < 500 ? stack : stack.substring(0, 500));\n            } else {\n                // Log the error message if the browser doesn't support stack\n                s_logger.addCount(ShazamLogger.LOG_EVENT_NAMES.UNCAUGHT_ERROR, e.message);\n            }\n        });\n    };\n    /**\n     * Handles Object.create does not exist in IE < 8\n     */\n    if (typeof Object.create !== 'function') {\n        Object.create = function(obj) {\n            function fake(){}\n            fake.prototype = obj;\n            return new fake();\n        };\n    }\n    \n    ShazamLogger.prototype = Object.create(ForesterLogger.prototype);\n    \n    ShazamLogger.prototype.constructor = ShazamLogger;\n    \n    /**\n     * Define event types could be used in ShazamLogger*/\n    ShazamLogger.EVENT_TYPES = {\n        TIMER:          'timer',\n        COUNTER:        'counter',\n        JSON:           'json'\n    };\n    \n    ShazamLogger.LOG_EVENT_NAMES = {\n        BUY_BOX_LOAD_LATENCY:       'BuyBoxLoadLatency',\n        AAN_LATENCY:                'AanLatency',\n        AAN_ERROR:                  'AanError',\n        DROP_DOWN_SELECTOR:         'DropDownSelector',\n        UNCAUGHT_ERROR:             'UncaughtError',\n        UNDEFINED_TRACKER_ARG:      'UndefinedTrackerArg',\n        COORDINATOR_TRACKER:        'CoordinatorTracker',\n        IMAGE_LOAD_LATENCY:         'ImageLoadLatency',\n        CREATIVE_LOAD_LATENCY:      'CreativeLoadLatency'\n    };\n    \n    ShazamLogger.addListener = function(element, eventName, listener) {\n        //Cross-browser add event listener\n        var eventListener = function(e) {\n            // Cross-browser event\n            e = e || window.event;\n            return listener(e);\n        };\n        if (element.addEventListener) {\n            element.addEventListener(eventName, eventListener, !0);\n        } else {\n            eventName = 'on' + eventName;\n            if (element.attachEvent) {\n                element.attachEvent(eventName, eventListener);\n            } else {\n                element[eventName] = eventListener;\n            }\n        }\n    };\n    \n    /**\n     * Logimpression with defaulted key and value pairs in it, including shazamId,\n     * templeteName, locale and adServer information\n     * @param argsLists The key-value pair to be inculded. It's optional.\n     */\n    ShazamLogger.prototype.logImpression = function(argsLists) {\n        argsLists = argsLists || {};\n        argsLists.s = argsLists.shazamId || '2244087';\n        argsLists.n = argsLists.templateName || 'Static Image';\n        argsLists.l = argsLists.locale || 'US';\n        argsLists.as = argsLists.adServer || 'adss';\n        argsLists.tmjv = argsLists.templateMajorVersion || '1';\n        argsLists.tmnv = argsLists.templateMinorVersion || '124';\n        switch(argsLists.as) {\n            case 'doubleclick':\n                argsLists.ai = argsLists.adId || '%eaid!';\n                argsLists.ci = argsLists.creativeId || '%ecid!';\n                break;\n            case 'cornerstone':\n                argsLists.ai = argsLists.adId || '{%ad_cfid}';\n                argsLists.ci = argsLists.creativeId || '{%creative_cfid}';\n                break;\n            case 'preview':\n            case 'AdLab':\n                argsLists.ai = argsLists.adId || 'AD_ID';\n                argsLists.ci = argsLists.creativeId || 'CREATIVE_ID';\n                break;\n            case 'mediacentral':\n                argsLists.ai = argsLists.adId || spInfo.aid;\n                argsLists.ci = argsLists.creativeId || spInfo.cid;\n                break;\n            default:\n                argsLists.ai = argsLists.adId || '';\n                argsLists.ci = argsLists.creativeId || '';\n        }\n        argsLists.ua = navigator.userAgent;\n        ForesterLogger.prototype.logImpression.call(this, argsLists);\n    };\n\n    /** \n     * Start a timer for a specific event \n     * @param eventName Indicate the name of a specific event\n     */\n    ShazamLogger.prototype.startTimer = function(eventName) {\n        this.timers[eventName] = new Date;\n    };\n    \n    /**\n     * End a timer for a specific event get the begin time and calculate the time\n     * finally log the time event\n     * Time is measured in millisecond \n     * @param eventNmae Indicate the name of a specific event\n     */\n    ShazamLogger.prototype.endTimer = function(eventName) {\n        if (this.timers[eventName] == null) {\n            return;\n        }\n        this.timers[eventName] = new Date - this.timers[eventName];\n        this.logEvent(eventName, this.timers[eventName], ShazamLogger.EVENT_TYPES.TIMER);\n        this.timers[eventName] = null;\n    };\n    \n    /**\n     * Log a counter type event. \n     * @param eventName Indicate the name of a specific event\n     * @param eventValue This is optional and is defaulted to 1 since it is a counter\n     * for a single event.\n     */\n    ShazamLogger.prototype.addCount = function(eventName, eventValue) {\n        eventValue = eventValue || 1;\n        this.logEvent(eventName, eventValue, ShazamLogger.EVENT_TYPES.COUNTER);\n    };\n    \n    return ShazamLogger;\n})();;\n    var shazam_logger = new ShazamLogger();\n    shazam_logger.logImpression();\n    ShazamLogger.addListener(document, \"click\", function(event){\n        shazam_logger.logEvent(ShazamLogger.LOG_EVENT_NAMES.COORDINATOR_TRACKER, {'x' : event.clientX, 'y' : event.clientY}, ShazamLogger.EVENT_TYPES.JSON);\n    });\n    \n    // return refrence to logger for additional instumentation\n    return shazam_logger;\n})();\n;\n    \n    var ON_AMAZON_PATTERN = /\\.amazon\\.com(:.*)?$/;\n\n/**\n * If IS_3P is defined, then store its value, otherwise we don't know if we're on a third party site.\n * IS_3P will not be defined within this context so minification will not minify it.\n * The IS_3P variable is only defined when Cornerstone serves this ad unit to a 3P site.\n *\n * We are assuming that the creative is on amazon if the iframe the creative is in\n * or the iframe in which the iframe of the creative is in has amazon domain.\n *\n * We assume this will work because anyone who properly uses our ads\n * will fall under the following categories:\n *\n * On Amazon:\n * Uses iframeproxy and could possibly have aax iframe within it that holds the content.\n *\n * O&O Subsidiaries:\n * Uses amazon scripts that inject into divs, no Amazon iframes (doesn't use iframeproxy).\n *\n * 3P:\n * Uses AAX iframe, so referrer isn't Amazon.\n *\n */\n\nvar knownToBeOnThirdParty = (typeof IS_3P !== 'undefined') && IS_3P;\n// If the parent iframe indicates we are on Amazon, this variable stores 'true',\n// but we may be on Amazon even if the parent doesn't indicate it.\n\nvar knownToBeOnAmazon = true;\n\n// This logic takes care of the case when we show ads on IMDB, Woot etc.\nvar knownToBeOnSubsidiary = !knownToBeOnThirdParty && !knownToBeOnAmazon;\n\n/**\n * Stub method used to for doing nothing with good minification.\n */\nvar DO_NOTHING = function(){};\n\n/**\n * Checks the given url and finds whether it is secure or not.\n * @method isSecure\n * @param url {String} protocol to check.\n * @return Returns true if protocol is secure, false otherwise.\n */\nvar isSecure = function(url) {\n    return (/s/.test(url.protocol));\n};\n\n/**\n * Checks the given url and finds whether is is an internal link or not.\n * @method isInternalUrl\n * @param url {String} Fully Qualified URL to check.\n * @return Return true if the url is internal to Amazon.com, false otherwise.\n */\nvar isInternalUrl = function(url) {\n    if(!url){ // No Url is treated as external\n        return false;\n    }else{\n        var regex = /^((?:https?:)\\/\\/)?([\\w\\-\\.]+(?::[0-9]+)?)\\/?(.*)$/;\n        var parts = url.match(regex);\n        var domain = parts[2];\n        return /\\.amazon\\.com(:.*)?$/.test(domain);\n    }\n};\n\n/**\n * iterates over an array.\n * @method forEach\n * @param array {Array}\n * @return Does not return anything - applies callback for each element of the array.\n */\nvar forEach = function(array, callback) {\n    for (var index = 0, length = array.length; index < length; index++) {\n        callback(array[index], index, array);\n    }\n};\n\n/**\n * Return an element with a given ID.\n * @method getElementByID\n * @param id {String}\n * @return DOM Element with the given ID.\n */\nvar getElementById = function(id) {\n    return document.getElementById(id);\n};\n\nvar getElementsByClassName = function(className) {\n    if (document.getElementsByClassName) {\n        return document.getElementsByClassName(className);\n    } else if (document.querySelectorAll) { // for IE 8\n        return document.querySelectorAll('.' + className);\n    } else  if (document.evaluate) {\n        var pattern = \".//*[contains(concat(' ', @class, ' '), ' \" + className + \" ')]\";\n        var elements = document.evaluate(pattern, document, null, 0, null);\n        var result = [];\n        var i;\n        while(i = elements.iterateNext()) {\n            result.push(i);\n        }\n        return result;\n    } else { // Brute force fall back\n        var elements = document.getElementsByTagName(\"*\");\n        var pattern = new RegExp(\"(^|\\\\s)\" + className + \"(\\\\s|$)\");\n        var result = [];\n        for (var i = 0; i < elements.length; i++) {\n            if ( pattern.test(elements[i].className) ) {\n                result.push(elements[i]);\n            }\n        }\n        return result;\n    }\n};\n    \n/**\n * Returns a query string from a query object\n * @method getQueryString\n * @param  {Object} query\n * @param  {Boolean} escapeResult\n * @return {String} query string\n */\nvar getQueryString = function(query, escapeResult) {\n    var queryStringParts = [];\n    for (var key in query) {\n        queryStringParts.push(key + '=' + query[key]);\n    }\n\n    var queryString = queryStringParts.join('&');\n    return escapeResult ? encodeURIComponent(queryString) : queryString;\n};\n\n/**\n * Perform a time-sensitive fade animation. Only one element can have the fade effect at one time.\n * @method fadeElement\n * @param element {Object} HTML element which will be faded in/out.\n * @param isIn {Boolean} Determines the fade direction in or out.\n * @param cb {Function} Callback function that will be called when animation ends.\n * @param fadeDuration {Number} Speed of the fade animation in milliseconds.\n * @return Does not return anything.\n */\nvar fadeStart;\nvar fadeElement = function(element, isIn, cb, fadeDuration) {\n    element.style.visibility = 'visible';\n\n    var now = new Date();\n    fadeStart = fadeStart || now;\n    fadeDuration = fadeDuration || 300;\n    var opacity = Math.min((now - fadeStart) / fadeDuration, 1);\n    if(!isIn){\n        opacity = 1 - opacity;\n    }\n    setOpacity(element, opacity);\n    if ((isIn && opacity < 1) || (!isIn && opacity > 0)) {\n        setTimeout(function(){\n            fadeElement(element, isIn, cb, fadeDuration);\n        }, 25);\n    } else {\n        // Clean the start time of the fade for the next fade effect.\n        fadeStart = null;\n        // Clean filter, otherwise, IE 6/7/8 displays the background of the ad.\n        element.style.filter = '';\n        if (cb) { cb(); }\n    }\n};\n\n/**\n * Set the opacity of a given element.\n * @method setOpacity\n * @param element {Object} - DOM element for which opacity has be to set\n * @param opacity {Number} \n * @return Does not return anything - sets the opacity of the element.\n */\nvar setOpacity = function(element, opacity) {\n    var style = element.style;\n    style.display = 'block';\n    style.opacity = style.mozOpacity = opacity;\n    style.filter = 'alpha(opacity=' + (opacity * 100) + ')';\n};\n\n/**\n * Set the background image of a given element.\n * @method setBackgroundImage\n * @param element {Object} - DOM element for which background has be to set\n * @param backgrounfImageUrl {String}\n * @return Does not return anything - sets the background of the element.\n */\nvar setBackgroundImage = function(element, backgroundImageUrl) {\n    element.style.backgroundImage = 'url(' + backgroundImageUrl + ')';\n};\n\n/**\n * Set the href of a given element (and give it a target).\n * @method setHref\n * @param element {Object} - DOM element for which href and target have to be set\n * @param href {String}\n * @return Does not return anything - sets the href and target for the given element.\n */\nvar setHref = function(element, href, newWindow) {\n    element.href = href;\n    element.target = newWindow ? \"_blank\" : \"_top\";\n};\n\n/**\n * Sets one or more style attributes for an element\n * @param {Object} element    DOM element to set the style attributes on\n * @param {Object} attributes Style attributes hash map to be set on the DOM element\n */\nvar setStyle = function(element, attributes) {\n    for (var key in attributes) {\n        element.style[key] = attributes[key];\n    }\n};\n\n/**\n * Checks if the element has a given class.\n * @method hasClass\n * @param elem {Object} - DOM element for which we are checking the class\n * @param cls {String} - Name of the class\n * @return returns Boolean.\n */\nvar hasClass = function(elem, cls) {\n    return elem.className.match(new RegExp('(\\\\s|^)' + cls + '(\\\\s|$)'));\n};\n\n/**\n * Adds class to a given element.\n * @method addClass\n * @param elem {Object} - DOM element for which to add class\n * @param cls {String} - Name of the class\n * @return Does not return anything. Adds class to the given element.\n */\nvar addClass = function(elem, cls) {\n    if (!hasClass(elem, cls))\n        elem.className += \" \" + cls;\n};\n\n/**\n * Removes class of a given element.\n * @method removeClass\n * @param elem {Object} - DOM element for which to remove the class\n * @param cls {String} - Name of the class\n * @return Does not return anything. Removes class from the given element.\n */\nvar removeClass = function(elem, cls) {\n    if (hasClass(elem, cls)) {\n        var reg = new RegExp('(\\\\s|^)' + cls + '(\\\\s|$)');\n        elem.className = elem.className.replace(reg, ' ');\n    }\n};\n\n/**\n * Show element.\n * @method show\n * @param elem {Object} - DOM element to be made visible\n * @return Does not return anything. Makes element visible.\n */\nvar show = function(elem) {\n    removeClass(elem, 'hide');\n};\n\n/**\n * Hide element.\n * @method hide\n * @param elem {Object} - DOM element to hide\n * @return Does not return anything. Hides the element.\n */\nvar hide = function(elem) {\n    addClass(elem, 'hide');\n};\n\n/**\n * Trims leading and trailing spaces of a text. \n * Older versions of IE does not support String trim() function.\n * @method trimText\n * @return {String} Returns trimmed text.\n */\nvar trimText = function(text) {\n    return text.replace(/^\\s+|\\s+$/, '');\n};\n\n/**\n * Gets the value of the simulation with the given name.\n * If it doesn't exist or is not accessible, the defaultValue will be returned.\n * @method getSimulationValue\n * @return {String} Returns trimmed text.\n */\nvar getSimulationValue = function(simulationName, defaultValue) {\n    try {\n        return (parent && parent.sim && parent.sim[simulationName]) ? parent.sim[simulationName] : defaultValue;\n    } catch(e) {\n        return defaultValue;\n    }\n};\n\nvar isShazamPreview = function() {\n        try {\n            return (parent && parent.sim);\n        } catch(e) {\n            return false;\n        }\n};\n\n/**\n * Makes a call to the provided endpoint with exponential backoff retry.\n * If the service call times out, a retry will be attempted until the\n * maximum number of times of requests is reached.\n * @method callService\n * @param endpoint {String}\n *          The service's available endpoint.\n *          This is what precedes the '?' character and\n *          is preceded by the protocol and '//' characters in the URI.\n *          EG: www.amazon.com/aan/\n *\n * @param params {Object}\n *          The argument-value pairs that are passed to the service.\n *          This should be a flat JSON object, which is converted to a key-value list string\n *          that is preceded by the '?' character in the URI.\n *          EG: {Operation:\"ping\"} -> Operation=ping\n *          or: {\"Operation\":\"getElementById\",\"id\":\"1000\"} -> Operation=getElementById&id=1000\n *\n * @param maximumTryCount {Number}\n *          The maximum number of times the service call should happen. Should be an integer.\n *          The total number of calls can be less than this, since calls will stop\n *          being created once the first successful callback occurs.\n *          EG: 2\n *\n * @param retryTimeInMS {Number}\n *          The time to wait in milliseconds until the second call is made.\n *          For every successive call after the second call, this number is set to the product of itself and the exponentialBackoffCoefficient.\n *          EG: 1000\n *\n * @param exponentialBackoffCoefficient {Number}\n *          The value by which the retryTimeInMS increases with each retry.\n *          The n'th retry (or the (n-1)th try) will have retryTimeInMS = retryTimeInMS*(exponentialBackoffCoefficient^n).\n *          EG: 1.5, 2\n *\n * @param successCallback {Function}\n *          The callback that is called in the case of response success.\n *          The function will be called with the first parameter being the jsonp response object.\n *          EG: function(response) {console.log(\"Response:\", response);}\n *\n * @param failureCallback {Function} {optional}\n *          The callback that is called in the case of response failure after maximumTryCount tries.\n *          The function will be called with no parameters.\n *          EG: function() {alert(\"No response!\");}\n *\n * @return Does not return anything.\n */\nvar callService = function(endpoint, params, maximumTryCount, retryTimeInMS, exponentialBackoffCoefficient, successCallback, failureCallback) {\n    var callbackName = 'serviceCallback';\n    var numTries = 0;\n    params[\"JSONCallBack\"] = callbackName;\n    \n    if(typeof ClientMetrics !== 'undefined') {\n        ClientMetrics.startTimer(ClientMetrics.events.AAN_TIME);\n    }\n    \n    window[callbackName] = function(jsonResponseObj) {\n        if(typeof jsonResponseObj !== 'undefined' && typeof jsonResponseObj.error !== 'undefined') {\n            // If the response contains an error object we should retry in-case of a race condition.\n            return;\n        }\n        // When the response is received, make sure the request isn't made again.\n        // This can happen when the first response returns slowly, after the another retry attempt has been made.\n        maximumTryCount = -1;\n        // If the second response comes after the first response, make sure the callback doesn't occur twice.\n        failureCallback = window[callbackName] = DO_NOTHING;\n        \n        if(typeof ClientMetrics !== 'undefined') {\n            ClientMetrics.endTimer(ClientMetrics.events.AAN_TIME);\n            ClientMetrics.logEvent(ClientMetrics.events.NUM_AAN_CALLS, numTries);\n        }\n        \n        successCallback(jsonResponseObj);\n    };\n    \n    (function request() {\n        if (maximumTryCount > 0) {\n            var callScript = document.createElement('script');\n            callScript.src = '//' + endpoint + '?' + getQueryString(params);\n            document.body.appendChild(callScript);\n            maximumTryCount--;\n            numTries++;\n            setTimeout(request, retryTimeInMS);\n            // Exponentially back-off the retries.\n            retryTimeInMS *= exponentialBackoffCoefficient;\n        }\n        // If maximumTryCount has been decremented to 0, and no response has happened, and failureCallback exists, then call the failure callback.\n        // If the response has been recieved, maximumTryCount will be -1, which converts to true, so !(-1) is false.\n        else if (!maximumTryCount && failureCallback) {\n            failureCallback();\n            if(typeof ClientMetrics !== 'undefined') {\n                ClientMetrics.addMetric(ClientMetrics.events.FINAL_STATE, 'aanFail');\n                ClientMetrics.addMetric(ClientMetrics.events.NUM_AAN_CALLS, numTries);\n                ClientMetrics.flushMetrics();\n            }\n        }\n    })();\n};\n\n/**\n * This method will truncate text within an html element by iteratively removing\n * its last word until its container fits within a maxHeight specified. inputs:\n * $text - the element that contains the text to be truncated $container - the\n * element that contains the text element maxHeight - the maximum height that we\n * will allow the $container element to obtain\n * \n * Returns a boolean which states whether or not it was possible to reduce the size\n * and fit $container within maxHeight\n */\nvar truncateText = function($text, $container, maxHeight) {\n    var text = $text.innerHTML;\n    var truncatedText;\n    var bestText = text;\n    if ($container.offsetHeight > maxHeight) {\n        while ($container.offsetHeight > maxHeight) {\n            var offsetHeight = $container.offsetHeight;\n            //Remove one word and surrounding whitespace\n            truncatedText = text.replace(/\\s+\\S+\\s*$/, '');\n            //If we can't get shorter, then exit loop\n            if (truncatedText.length == text.length) break;\n            text = truncatedText;\n            $text.innerHTML = text + '...';\n            if ($container.offsetHeight < offsetHeight) {\n                // we managed to reduce the height, so this is our best\n                // option so far\n                bestText = $text.innerHTML;\n            }\n        }\n    }\n    $text.innerHTML = bestText;\n    return $container.offsetHeight <= maxHeight;\n};\n\n\n/**\n *  If IE documentMode is less than 8, z-index based setup of full-background click target\n *  and overlaid interactive elements is broken. This function is a fallback for that case\n */\nfunction setupIEBackgroundClick($ad, $link) {\n    var isIE = (navigator.appName === 'Microsoft Internet Explorer');\n    var clickTargetClassName = 'click-target';\n    \n    function regexEscape(s) {\n        return s.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');\n    };\n\n    clickTargetClassName = regexEscape(clickTargetClassName);\n\n    // className must be regex escaped\n    function elementHasClass(e, className) {\n        if (!e || !e.className || e.className === \"\") {\n            return false;\n        }\n        var classNameRegex = new RegExp('\\\\s' + className + '\\\\s');\n        if ((' ' + e.className + ' ').match(classNameRegex)) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    function selfOrAncestorClickTarget(ele) {\n        var current = ele;\n\n        while (current.nodeName && current.nodeName !== \"BODY\") {\n            if (elementHasClass(current, clickTargetClassName) || current === $link) {\n                return current;\n            }\n            current = current.parentElement;\n        }\n\n        return null;\n    }\n\n    if (isIE && document.documentMode < 8) {\n        $ad = $ad || document.getElementById('ad');\n        $link = $link || document.getElementById('link');\n        var linkHref = $link.href;\n        var linkTarget = $link.target;\n\n        var linkWidth = 400;\n        var linkHeight = 39;\n\n\n        $link.style.height = linkHeight + 'px';\n        $link.style.width = linkWidth + 'px';\n\n        // register click target\n        $ad.onclick = function () {\n            if (selfOrAncestorClickTarget(window.event.srcElement)) {\n                return true;\n            } else {\n                window.open(linkHref, linkTarget);\n            }\n        };\n        $ad.style.cursor = \"pointer\";\n    }\n}\n\n// Expand slot size for 300x600 ads, but not when previewing in Shazam\nvar expandSlot = function () {\n}\n\n// copied from Shazam/static/js/application/views/components/aap.js\nvar fullLogoPaths = {\n    'blackOrangeLogo': 'da/creatives/logo_orangeblack._V390083514_.png',\n    'blackLogo': 'da/creatives/logo_black._V390083509_.png',\n    'whiteOrangeLogo': 'da/creatives/logo_orangewhite._V390083509_.png',\n    'whiteLogo': 'da/creatives/logo_white._V390083514_.png'\n}\n\nvar smallLogoPaths = {\n    'blackOrangeLogo': 'da/creatives/small_logo_orangeblack._V368061135_.png',\n    'blackLogo': 'da/creatives/small_logo_black._V368061135_.png',\n    'whiteOrangeLogo': 'da/creatives/small_logo_orangewhite._V368061134_.png',\n    'whiteLogo': 'da/creatives/small_logo_white._V368061135_.png'\n}\n\nvar getAapLogoPath = function (logoType, small) {\n    if (small) {\n        return smallLogoPaths[logoType];\n    } else {\n        return fullLogoPaths[logoType];\n    }\n};\n\n\n\nvar BACKGROUND_CLICK_TRAFFIC_EVENT_TYPE = 'adBackgroundClick';\nvar TITLE_CLICK_TRAFFIC_EVENT_TYPE = 'adTitleClick';\nvar ATC_CLICK_TRAFFIC_EVENT_TYPE = 'addToCartClick';\nvar SHOP_NOW_CLICK_TRAFFIC_EVENT_TYPE = 'shopNowClick';\nvar PREORDER_CLICK_TRAFFIC_EVENT_TYPE = 'preorderClick';\nvar CLIP_COUPON_CLICK_TRAFFIC_EVENT_TYPE = 'clipCouponClick';\nvar MORE_INFO_CLICK_TRAFFIC_EVENT_TYPE = 'moreInfoClick';\nvar READ_ALL_REVIEWS_CLICK_TRAFFIC_EVENT_TYPE = 'readAllReviewsClick';\nvar PRIMARY_CTA_CLICK_TRAFFIC_EVENT_TYPE = 'primaryCtaClick';\nvar ALTCTA_CLICK_TRAFFIC_EVENT_TYPE = 'altCtaClick';\nvar LEARN_MORE_TRAFFIC_EVENT_TYPE = 'learnMore';\nvar ADD_TO_WISHLIST_TRAFFIC_EVENT_TYPE = 'addToWishlistClick';\nvar SNS_CLICK_TRAFFIC_EVENT_TYPE = 'subscribeAndSaveClick';\n\n// Internal Metrics Clicks\nvar CLOSE_MODAL_EVENT_TYPE = 'closeModalClick';\n\n// Store all valid click events in an array for validation\nvar VALID_EVENTS = [\n    BACKGROUND_CLICK_TRAFFIC_EVENT_TYPE,\n    TITLE_CLICK_TRAFFIC_EVENT_TYPE,\n    ATC_CLICK_TRAFFIC_EVENT_TYPE,\n    SHOP_NOW_CLICK_TRAFFIC_EVENT_TYPE,\n    PREORDER_CLICK_TRAFFIC_EVENT_TYPE,\n    CLIP_COUPON_CLICK_TRAFFIC_EVENT_TYPE,\n    MORE_INFO_CLICK_TRAFFIC_EVENT_TYPE,\n    READ_ALL_REVIEWS_CLICK_TRAFFIC_EVENT_TYPE,\n    PRIMARY_CTA_CLICK_TRAFFIC_EVENT_TYPE,\n    ALTCTA_CLICK_TRAFFIC_EVENT_TYPE,\n    LEARN_MORE_TRAFFIC_EVENT_TYPE,\n    ADD_TO_WISHLIST_TRAFFIC_EVENT_TYPE,\n    CLOSE_MODAL_EVENT_TYPE,\n    SNS_CLICK_TRAFFIC_EVENT_TYPE\n];\n\nvar SIS_PROTOCOL = 'ANY';\nvar SIS_BASE_URL = (SIS_PROTOCOL === 'ANY' ? location.protocol : SIS_PROTOCOL) + '//s.amazon-adsystem.com';\n\n    var THIRD_PARTY_TRACKER = 'https://aax-us-east.amazon-adsystem.com/x/getadi?src=3830&c=100&sz=1x1&pt=StyleCodeLiveClickTracker&slot=488866fb-ee1a-426e-9415-35f443c4c950&ct=&ts=%5Bcachebust%5D';\n\n\n\n\n\n\n// No recognized ad server: adss\nvar adServer = 'dart';\nvar adId = '';\nvar creativeId = '';\nvar impressionId = '--##IMPRESSION_ID##--';\n\nvar isValidEvent = function(eventType) {\n    // Cannot use Array.prototype.indexOf because it doesn't exist in IE quirks mode.\n    for (var i = 0; i < VALID_EVENTS.length; i++) {\n        if (VALID_EVENTS[i] === eventType) {\n            return true;\n        }\n    }\n    return false;\n};\n\n/**\n * Form SIS/Forester click tracker URL. Returns a pixel if redirect is null.\n * @method getClickTracker\n * @return returns tracking url\n */\nvar getClickTracker = function(eventType, redirectURL, signature) {\n    // Validate the eventType\n\n    // Inject AAP/ESS ref-tag for offsite OPS attribution\n    if (typeof UrlUtils === 'undefined') {\n\n    /**\n     * @public\n     * @type {module}\n     */\n    window.UrlUtils = {\n        // Shazam Renderer helper that detects\n        // if a URL has a ref-tag in it\n        /** @type {function} */\n        hasRefTag: function (uri)\n{\n    return /[\\/&?]\\s*ref_?=/.test(uri);\n},\n\n        // Shazam Renderer helper that detects\n        // if a URL is on the Amazon domain\n        /** @type {function} */\n        isAmazonUri: function (uri)\n{\n    // Firstly skip the scheme of a uri (Ref: https://tools.ietf.org/html/rfc3986#section-3.1)\n    var uriWithoutScheme = uri.replace(/^[a-zA-Z][a-zA-Z0-9+.-]*:\\/\\//, \"\");\n    // this splits the given uri by '/', '?', '#', ':' character, ignoring empty strings.\n    var uriComponents = uriWithoutScheme.split(/[\\/?#:]/).filter(function(el) { return el.length != 0; });\n\n    // if no first elements are left after the skip above, fail the check.\n    if (!uriComponents[0]) {\n        return false;\n    }\n    return /amazon[.]([a-zA-Z]+$|[a-zA-Z]+.[a-zA-Z]+$)/.test(uriComponents[0]);\n},\n\n        // Injects QueryString parameter in a given URL\n        injectQueryStringParam: function(url, queryParamKey, queryParamVal) {\n            if (!queryParamKey || !queryParamVal) {\n                return url;\n            }\n\n            var queryParam = '?' + queryParamKey + '=' + queryParamVal;\n            var fragmentUrlIndex = url.indexOf('#');\n            var queryStringUrlIndex = url.indexOf('?');\n            var hasFragment = fragmentUrlIndex >= 0;\n            var hasQueryString = queryStringUrlIndex >= 0;\n\n            // Check to make sure querystring is before fragment\n            // as per: https://tools.ietf.org/html/rfc3986#section-3\n            if (hasFragment && hasQueryString) {\n                hasQueryString = queryStringUrlIndex < fragmentUrlIndex;\n            }\n\n            // If no querystring or fragment detected\n            // no replacements are required\n            if (!hasQueryString && !hasFragment) {\n                return url + queryParam;\n            }\n\n            // Continue to inject query param if \n            // a querystring or fragment is detected.\n            var queryDelimiter = hasQueryString ? '?' : '#';\n            var urlParts = url.split(queryDelimiter);\n            var urlRest = urlParts.slice(1).join(queryDelimiter);\n\n            if (hasQueryString) {\n                queryDelimiter = '&';\n            }\n\n            var urlWithInjectedQueryParam = urlParts[0] + queryParam;\n            if (urlRest) {\n                urlWithInjectedQueryParam += queryDelimiter + urlRest;\n            }\n\n            return urlWithInjectedQueryParam;\n        },\n\n        // Injects AAP ref-tag to measure OPS impact of off-site AAP bidding\n        // Ref-tag is injected if:\n        // 1. URL doesn't have a ref-tag already in it\n        // 2. URL is linking to an Amazon page\n        // 3. Creative is running offsite\n        // 4. Advertiser is running paid AAP\n        injectAapRefTag: function(url) {\n            var isRequestOn3p = (typeof IS_3P !== 'undefined' && IS_3P);\n            var aapOpsRefTag = '';\n\n            if (!url || !(aapOpsRefTag && isRequestOn3p && this.isAmazonUri(url) && !this.hasRefTag(url))) {\n                return url;\n            }\n\n            return this.injectQueryStringParam(url, 'ref', aapOpsRefTag);\n        },\n\n        /**\n         * Produces unique token to allow the VPC team to identify \n         * the source of the coupon clip and if the source is paid \n         * Advertising, no clip-fee will be applied thereby ensuring\n         * that the paid Ad campaign doesn't negatively impact the \n         * Coupon budget.\n         * \n         * The token is produced as follows:\n         *   base64-encoding of \"<click-timestamp>;<source-id>\"\n         *\n         * JIRA: https://ad-jira.amazon.com/browse/TH-470\n         * \n         * @return {String}\n         */\n        getCouponToken: function() {\n            return btoa(new Date().getTime() + \";AMG\");\n        },\n\n        /**\n         * Macro used to replace with actual token\n         * for waiving VPC clipping fee at click-time\n         *\n         * JIRA: https://ad-jira.amazon.com/browse/TH-470\n         * \n         * @constant\n         * @return {[type]} [description] \n         */\n        getCouponTokenMacro: function() {\n            return \"VPC_CS_TOKEN_MACRO\";\n        }\n    };\n}\n\n    redirectURL = UrlUtils.injectAapRefTag(redirectURL);\n\n    var foresterArgs = {\n        i: impressionId,\n        e: eventType,\n        a: adId,\n        c: creativeId,\n        s: adServer\n    };\n\n    var query = {\n        d: 'forester-did',\n        'ex-fargs': encodeURIComponent('?' + getQueryString(foresterArgs)),\n        'ex-fch': 416719,\n        rd: (redirectURL ? encodeURIComponent(redirectURL) : ''),\n        cb: new Date().getTime()\n    };\n    \n    // SIS Signature support\n    if(redirectURL && signature) { \n        query.sig=signature;\n    }\n\n   /*\n    * Apply ref tag in the redirect url if it is available. Embed ref tag inside the URL itself using '/ref='.\n    * e.g. http://www.amazon.de/b/ref=myRefTag?ie=UTF8&node=365206031.\n    */\n    var refTag = '';\n    var associateTag = '';\n\n    var questionMark = '%3F';\n    var ampersand = '%26';\n    var slash = '%2F';\n    var equalSign = '%3D';\n\n    var refTagString = 'ref' + equalSign + refTag;\n    var associateTagString = 'tag' + equalSign + associateTag;\n\n    if (refTag && refTag !== '' && query.rd) {\n        if (query.rd.indexOf(questionMark) != -1) {\n            query.rd = query.rd.replace(new RegExp(questionMark), slash + refTagString + questionMark + (associateTag ? associateTagString + ampersand : ''));\n        } else {\n            query.rd = query.rd + slash + refTagString + (associateTag ? questionMark + associateTagString : '');\n        }\n    }\n\n    var trackingURL = SIS_BASE_URL  + (redirectURL ? '/click' : '/iui3') + '?' + getQueryString(query);\n\n    // Don't append the AAX click tracker -- it's breaking stuff on Yahoo.\n    // Instead we'll fire the AAX tracker asynchronously using the\n    // attachAsyncAaxTracker function defined below.\n    //\n    // \n\n    return trackingURL;\n};\n\n/**\n * Helper to set tracker as the HREF\n * @method setTrackerHref\n */\nvar setTrackerHref = function(element, event, redirectURL, newWindow, signature) {\n    setHref(element, getClickTracker(event, redirectURL, signature), newWindow);\n};\n\n/**\n * Add tracking in parallel to an A tag. Tracker must be provided.\n */\nvar addAsyncTracking = function(element, tracker, options) {\n    DADS.Analytics.track3PClickAsync(element, tracker, options);\n};\n\n\n\n/**\n * Attach an async AAX tracker to an element. This is a no-op unless we are on\n * desktop and the ad server is Cornerstone.\n */\nvar attachAsyncAaxTracker = function(element) {\n};\n\n\n\n    var MEDIA_URL = (isSecure(location) ? '//images-na.ssl-' : '//g-ecx.') + 'images-amazon.com/images/G/01/';\n    var CREATIVE_URL = MEDIA_URL + 'shazam/FEB-GW-DesktopSWM-Template-400x39-1CznGh._V534889644_.jpg';\n    var LINK_URL = 'http://www.amazon.com/gp/browse.html/ref=live_scl_swm/?node=13301547011';\n\n\n        var smallLogo = false;\n    var LOGO_PATH = getAapLogoPath('blackOrangeLogo', smallLogo);\n    var LOGO_URL;\n    if (LOGO_PATH) {\n        LOGO_URL = MEDIA_URL + LOGO_PATH;\n    } else {\n        LOGO_URL = MEDIA_URL + 'da/creatives/logo_orangeblack._V390083514_.png';\n    }\n\n    // Force the window to reload after a browser back button press\n    window.onbeforeunload = DO_NOTHING;\n\n\n    var $link = getElementById('link');\n    var $ad = getElementById('ad');\n    var $box = getElementById('box');\n    var $logo = getElementById('logo');\n\n\n        var aapSim = false;\n        var isShazam = false;\n\n    setBackgroundImage($ad, CREATIVE_URL);\n    var openInNewTab = knownToBeOnThirdParty || knownToBeOnSubsidiary || isShazam;\n\n    var bgClickTracker = getClickTracker(BACKGROUND_CLICK_TRAFFIC_EVENT_TYPE, LINK_URL, 'b6a08431b91e93a9717d33770df25d95faa39f7e8c4514a5c62537244fac2a80');\n    setHref($link, bgClickTracker, openInNewTab);\n    // console.log(\"am \", knownToBeOnAmazon);\n    // console.log(\"3 \", knownToBeOnThirdParty);\n    // console.log(\"sub \", knownToBeOnSubsidiary);\n    // AAP Case\n    var $aapInfo= getElementById('aapInfo');\n    if (aapSim || knownToBeOnThirdParty) {\n            show($aapInfo);\n\n        // To maintain backwards compatiblity with AAP version 2\n\n        if ($logo) {\n            // Display the Amazon logo.\n            var logoStyle = $logo.style;\n            logoStyle.display = 'block';\n            if (navigator.userAgent.indexOf('MSIE 6') != -1) {\n                // png transparency does not work in IE6\n                LOGO_URL = LOGO_URL.replace(/png$/, 'gif');\n            }\n            logoStyle.backgroundImage = 'url(' + LOGO_URL + ')';\n            var logoPercentageBottom = parseInt('0', 10);\n            var logoPercentageLeft = parseInt('0', 10);\n\n            // Set logo position if properties aren't set\n            logoPercentageBottom = logoPercentageBottom >= 0 ? logoPercentageBottom : 0;\n            logoPercentageLeft = logoPercentageLeft >= 0 ? logoPercentageLeft : 0;\n\n            var logoWidth = parseInt('69', 10);\n            var adWidth = parseInt('400', 10);\n            var logoHeight = parseInt('29', 10);\n            var adHeight = parseInt('39', 10);\n\n            var logoLeft = ((logoPercentageLeft / 100) * (adWidth - logoWidth));\n            var logoBottom = ((logoPercentageBottom / 100) * (adHeight - logoHeight));\n\n            logoStyle.bottom = logoBottom + \"px\";\n            logoStyle.left = logoLeft + \"px\";\n            setHref($logo, bgClickTracker, openInNewTab);\n        }\n\n    }\n\n\nvar AdFeedback = (function(){\n    var _ = {};\n    \n    var createSlotId = function(v) {\n        //the slot id is created here: https://code.amazon.com/packages/GrandPrixAdTemplates/blobs/mainline/--/javascript/helpers/ads.js\n        return 'DA' + v.replace(/([a-z])[a-z]+(-|$)/g, '$1');\n    };\n\n    _.open = function() {\n            try {\n                if (window.SFClient) {\n                    SFClient.adFeedback();\n                } else {\n                    var frame = window.frameElement;\n                    var adContentId = frame.id.replace(/[^0-9]+/g, '');\n                    var slotAanParams = '';\n                    var slotId = frame.parentNode.id;\n                    for (var v in parent.aanParams) {\n                        if (createSlotId(v) === slotId) {\n                            slotAanParams = parent.aanParams[v];\n                        }\n                    }\n\n                    //  See openFeedback in\n                    //      https://code.amazon.com/packages/D16GSafeFrame/blobs/mainline/--/src/js/DAsf.js\n                    if (parent.d16g_showFeedbackDialog) {\n                        // New way to call ad feedback\n                        parent.d16g_showFeedbackDialog({\n                            a: slotAanParams,\n                            c: adContentId\n                        });\n                    } else if (parent.DA && parent.DA.s) {\n                        // Old ad feedback using DA-us file\n                        // TODO: remove once this method is completely gone\n                        parent.DAF = [adContentId, slotAanParams];\n                        parent.DA.s(parent.DA.f + '-external');\n                    }\n                }\n            } catch(e){}\n    };\n    \n    _.getFeedbackText = function() { return 'Ad'; };\n\n    return _;\n})();\n\n\nvar openFeedbackForm = function() { AdFeedback.open(); };\nvar feedbackText = AdFeedback.getFeedbackText();\ngetElementById('daAdFeedbackText').innerHTML = feedbackText;\ngetElementById('daAdFeedback').onclick = openFeedbackForm;\n\nvar iconURL = MEDIA_URL + 'da/adbubble_white.png';\ngetElementById('daAdFeedbackIcon').style.background = 'url(\\'' + iconURL + '\\') repeat scroll 0px 0px transparent';\n\n// Determine if we are in a safeframe\nfunction isSafeFrame() {\n    return typeof SFClient != 'undefined';\n}\n\n// We need here to hide the second ad feedback\n// https://ad-jira.amazon.com/browse/DACXCS-807\n// this logic should only be used for marquee sizes\n\n// The setTimeout is necessary because the AdFeedback that we're trying to hide is outside of the iframe\n// and is positioned in the document after the iframe\n// when trying to query the DOM from whithin the iframe for it it will return no results\n// so we let the rendering tread continue to render the element,\n// and the we queue our operation in the event loop.\nsetTimeout(function(){\n\n    'use strict';\n\n    try {\n        //don't attempt to access parent in safeframe\n        if(isSafeFrame()) {return;}\n\n        var frameworkAdFeedback,\n            querySelector   = parent.document.querySelector,\n            daAdFeedback    = document.getElementById('daAdFeedback');\n\n        // Fallback on getElementById, when Id will be present\n        if(querySelector){\n            // we need to call querySelector as a method of the document otherwise will throw illegal invocation\n            // call or apply might work but are not so explicit\n            frameworkAdFeedback = parent.document.querySelector('div#DAnsm > div');\n        }else{\n            frameworkAdFeedback = parent.document.getElementById('DAnsmFeedback');\n        }\n\n        // If both daAdFeedback and frameworkAdFeedback exists, hide the framework one\n        if(frameworkAdFeedback && daAdFeedback){\n            frameworkAdFeedback.style.display = 'none';\n        }\n    }catch(e){\n        // do nothing\n    }\n\n}, 0);\n\n\n//Expose the hide frameworkFeedback utility to consumers of the adfeedback component\n\nfunction hideframeworkFeedback(){\n    // We need here to hide the platform ad feedback\n    // https://ad-jira.amazon.com/browse/DACXCS-1417\n    try{\n        //don't attempt to access parent in safeframe\n        if(isSafeFrame()) {return;}\n\n        //only apply for nav-sitewide-msg\n        if(window.frameElement.parentNode.id !== 'DAnsm') {return;}\n        var _parentStyle        = parent.document.createElement('style');\n        _parentStyle.innerHTML  = 'div#DAnsm #DAnsmFeedback {display: none}';\n        parent.document.head.appendChild(_parentStyle);\n    }catch(e){\n        // do nothing\n    }\n}\n\n\n\n\n\n\n    /**\n     * Track third party clicks asynchronously\n     * to support standard re-direct and pixel\n     * trackers\n     */\n    if (typeof THIRD_PARTY_TRACKER === 'string') {\n        (function() {\n  /**\n   * Global Configuration\n   */\n  window.AD_DEBUG = true;\n  window.DADS = window.DADS || {};\n\n  /**\n   * Logger\n   */\n  function log() {\n    if (window.console && typeof window.console.log === 'function' && window.AD_DEBUG) {\n      var args = Array.prototype.slice.call(arguments, 0);\n      console.log.call(console, '[shazam:analytics-component] ' + args[0], args.slice(1));\n    }\n  }\n\n  /**\n   * Finds top-most link (anchor element) of a given element\n   * @param element  element whose top-most link is being searched\n   * @param @optional higestLevel  highest-level to climb in DOM tree (default = 2)\n   * @param @optional level  level to start in DOM tree (default = 0)\n   * @return Top-most anchor element in the DOM tree\n   */\n  function findTopLink(element, highestLevel, level) {\n    if (!element || !element.parentNode) return;\n\n    highestLevel = (typeof highestLevel === 'undefined') ? 2 : highestLevel;\n    level = (typeof level === 'undefined') ? 0 : level;\n    var parentElement = element.parentNode;\n    if (element.tagName === 'A') {\n      return element;\n    } else if (level < highestLevel) {\n      return findTopLink(parentElement, highestLevel, ++level);\n    }\n  }\n\n  /**\n   * Cross-browser method for listening for events on a DOM element\n   * @param  {HTMLElement} element\n   * @param  {String} eventName\n   * @param  {Function} listener\n   */\n  function bindEvent(element, eventName, listener) {\n    // Cross-browser event listener\n    var eventListener = function(e) {\n      // Cross-browser event\n      e = e || window.event;\n      \n      // Cross-browser event.preventDefault\n      e.preventDefault = e.preventDefault || function() {\n        e.returnValue = false;\n      };\n\n      // Cross-browser event.target\n      e.target = e.target || e.srcElement;\n\n      // Cross-browser event.stopPropagation\n      e.stopPropagation = e.stopPropagation || function() {\n        e.cancelBubble = true;\n      };\n\n      // Cross-browser event.which\n      if (!e.which) {\n        var buttonType = e.button;\n        if (buttonType !== 1) {\n          if (buttonType === 2) {\n            buttonType = 3;\n          } else if (buttonType === 4) {\n            buttonType = 2;\n          } else {\n            buttonType = 1;\n          }\n        }\n\n        e.which = buttonType;\n      }\n\n\n      // Cross-browser event.x & event.y\n      // TODO: Confirm this functionality. In Spotlight Modal (IE8), \n      // e.x and e.clientX return different values because e.x is relative \n      // to the last positioned ancestor element.\n      if (!e.x) e.x = e.clientX;\n      if (!e.y) e.y = e.clientY;\n\n      // Run event-listener in next tick\n      return listener(e);\n    };\n\n    // Special Case: Window OnLoad\n    if (element === window && document.readyState == 'complete') {\n      return listener();\n    }\n\n    // Cross-browser add event listener\n    if (element.addEventListener) {\n      element.addEventListener(eventName, eventListener, !0);\n    } else {\n      eventName = 'on' + eventName;\n      if (element.attachEvent)\n        element.attachEvent(eventName, eventListener);\n      else\n        element[eventName] = eventListener;\n    }\n  }\n\n  /**\n   * Tracks click on DOM element using Async Pixel technique described here:\n   * https://w.amazon.com/index.php/DA/CX/Click_Pixel_Tracking_Experiment\n   *\n   * @param {HTMLElement} element\n   * @param {String} clickTrackerUrl\n   * @param {Object} options (optional)\n   *   - @attribute {Integer} clickTrackerTimeout\n   *   			Amount of time to wait for clickTracker to fire. Defaults to 150 ms.\n   */\n  function track3PClickAsync(element, clickTrackerUrl, options) {\n    // Process Required params\n    if (!element || !clickTrackerUrl) {\n      return log('Error: Either element or clickTrackerUrl not provided to track3PClickAsync method');\n    }\n\n    // Process Optional params\n    options = options || {};\n    var clickTrackerTimeout = options.clickTrackerTimeout || 150;\n\n    // Checks if Element is a link\n    function isLink(el) {\n      var tagName = el.nodeName || el.tagName;\n      return typeof el !== 'undefined' && typeof el.href !== 'undefined' && /^a$/i.test(tagName);\n    }\n\n    // Checks if mouse-click was a right-click\n    function isRightClick(e) {\n      return e.which === 1;\n    }\n\n    // Mousedown handler for tracking\n    function onMouseDown(e) {\n      log('onMouseDown');\n\n      if (isLink(e.target) && isRightClick(e)) {\n        e.preventDefault();\n        log('ad-mousedown', e, e.which);\n        var trackingPixel = new Image();\n\n        function trackingPixelOnLoad(e) {\n          log('Tracking pixel done');\n        }\n\n        trackingPixel.onload = trackingPixelOnLoad;\n        trackingPixel.src = clickTrackerUrl;\n        log('Fired async pixel', clickTrackerUrl);\n      }\n    }\n\n    // Click handler for tracking\n    function onClick(e) {\n      log('ad-click', e);\n      var targetElement = e.target\n      linkTarget = targetElement.target;\n\n      if (isRightClick(e) && isLink(targetElement) && /_self|_top/ig.test(linkTarget)) {\n        log('link opens in same window. using async pixel delay.');\n        e.preventDefault();\n        var targetElementHref = targetElement.href;\n        setTimeout(function() {\n          log('Moving to next page', targetElementHref);\n          var $location;\n          try {\n            $location = parent.location;\n            log('Top location found. Moving to next page.');\n            window.open(targetElementHref, targetElement.target);\n          } catch (e) {\n            log('Cannot read parent. Likely to be in an iframe');\n            window.open(targetElementHref, '_blank');\n          }\n        }, clickTrackerTimeout);\n      }\n    }\n\n    // Bind both events\n    bindEvent(element, 'mousedown', onMouseDown);\n    bindEvent(element, 'click', onClick);\n  }\n\n  /**\n   * @module Analytics\n   * @namespace DADS.Analytics\n   */\n\n  DADS.Analytics = {\n    track3PClickAsync: track3PClickAsync\n  };\n\n})();\n\n        DADS.Analytics.track3PClickAsync($ad, THIRD_PARTY_TRACKER);\n    }\n\n})(window, document);}, 0); // setTimeout fixes load on back button for safari in some slots\n<\/script>\n\n</body>\n</html>\n",impId=window.SFClient?SFClient.getARID():window.frameElement.getAttribute("data-arid");
htmlString=htmlString.replace(/--##IMPRESSION_ID##--/g,impId),htmlString=htmlString.replace(/\[cachebust\]|%%CACHEBUSTER%%/gi,Math.floor(1e3*Math.random())),document.write(htmlString),document.close()}catch(ex){}
